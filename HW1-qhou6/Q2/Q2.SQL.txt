-- Setup. DO NOT REMOVE.
.headers on
.separator ','

DROP TABLE IF EXISTS movies;
DROP TABLE IF EXISTS movie_cast;
DROP VIEW IF EXISTS good_collaboration;
DROP TABLE IF EXISTS movie_overview;

-- ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** --

-- (a.i) Create tables

-- [insert your SQL statement(s) BELOW this line]

CREATE TABLE movies (
	id INTEGER,
	name TEXT,
	score INTEGER
);

CREATE TABLE movie_cast (
	movie_id INTEGER,
	cast_id INTEGER,
	cast_name TEXT
);

-- [insert your SQL statement(s) ABOVE this line]

-- [the following statement(s) are for autograding. DO NOT REMOVE.]
.tables
.print '~~~~~'

-- ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** --

-- (a.ii) Import data

-- [insert your SQLite command(s) BELOW this line]

.separator ","
.import movie-name-score.txt movies
.separator ","
.import movie-cast.txt movie_cast


-- [insert your SQLite command(s) ABOVE this line]

-- [the following statement(s) are for autograding. DO NOT REMOVE.]
.headers off
SELECT COUNT(*) FROM movies;
SELECT COUNT(*) FROM movie_cast;
.headers on
.print '~~~~~'

-- ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** --

-- (b) Create indexes

-- [insert your SQL statement(s) BELOW this line]

CREATE INDEX scores_index ON movies(score);
CREATE INDEX cast_index ON movie_cast(cast_id);
CREATE INDEX movie_index ON movies(id);


-- [insert your SQL statement(s) ABOVE this line]

-- [the following statement(s) are for autograding. DO NOT REMOVE.]
.indexes
.print '~~~~~'

-- ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** --

-- (c) Calculate a proportion

-- [insert your SQL statement(s) BELOW this line]

select (count(*) * 1.0 / (select count(*) from movies)) as prop from movies where score >  50;


-- [insert your SQL statement(s) ABOVE this line]

-- [the following statement(s) are for autograding. DO NOT REMOVE.]
.print '~~~~~'

-- ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** --

-- (d) Find the highest scoring movies

-- [insert your SQL statement(s) BELOW this line]

select id, name, score from movies order by score DESC, name ASC limit 7;


-- [insert your SQL statement(s) ABOVE this line]

-- [the following statement(s) are for autograding. DO NOT REMOVE.]
.print '~~~~~'

-- ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** --

-- (e) Find the most prolific actors

-- [insert your SQL statement(s) BELOW this line]

select cast_id, cast_name, count(*) as movie_count from movie_cast group by cast_id order by movie_count DESC, cast_name ASC limit 5;

-- [insert your SQL statement(s) ABOVE this line]

-- [the following statement(s) are for autograding. DO NOT REMOVE.]
.print '~~~~~'

-- ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** --

-- (f) Get high scoring actors

-- [insert your SQL statement(s) BELOW this line]

select cast_id,cast_name,avg(score) as average_score from movies inner join movie_cast on movies.id = movie_cast.movie_id where cast_id in (select cast_id from (select cast_id, COUNT(movie_id) as c from movie_cast group by cast_name) where c > 2) and score >= 50 group by cast_id order by average_score DESC, cast_name limit 10;

-- [insert your SQL statement(s) ABOVE this line]

-- [the following statement(s) are for autograding. DO NOT REMOVE.]
.print '~~~~~'

-- ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** --

-- (g) Creating views

-- [insert your SQL statement(s) BELOW this line]

create view good_collaboration as
select 
	cast_member_id1, cast_member_id2, 
	count(*) as movie_count,
	avg(score) as average_movie_score
from 
	(select 
		movie_cast1.cast_id as cast_member_id1, 
		movie_cast2.cast_id as cast_member_id2,
		movie_cast1.movie_id as movie_id
	from 
		movie_cast as movie_cast1 
	inner join 
		movie_cast as movie_cast2 
	on 
		movie_cast1.movie_id = movie_cast2.movie_id
	where 
		cast_member_id1 != cast_member_id2 and
		cast_member_id1 < cast_member_id2) as temp_cast
inner join 
	movies
on
	movies.id = temp_cast.movie_id
group by 
	movie_id
having 
	movie_count >= 3 and average_movie_score >= 40;



-- [insert your SQL statement(s) ABOVE this line]

-- [the following statement(s) are for autograding. DO NOT REMOVE.]
.headers off
PRAGMA table_info(good_collaboration);
SELECT AVG(average_movie_score) FROM good_collaboration;
.headers on
.print '~~~~~'

-- ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** --

-- (h) Find the best collaborators

-- [insert your SQL statement(s) BELOW this line]

select cast_id, cast_name, AVG(average_movie_score) as collaboration_score from movie_cast
inner join
	good_collaboration 
on 
	movie_cast.cast_id = good_collaboration.cast_member_id1 or movie_cast.cast_id = good_collaboration.cast_member_id2
group by cast_id
order by collaboration_score DESC, cast_name ASC limit 5;


-- [insert your SQL statement(s) ABOVE this line]

-- [the following statement(s) are for autograding. DO NOT REMOVE.]
.print '~~~~~'

-- ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** --

-- (i) Create FTS table and import data

-- [insert your SQL statement(s) BELOW this line]

CREATE VIRTUAL TABLE movie_overview USING fts3(
	id integer,
	name text,
	year integer,
	overview text,
	popularity decimal
); 

.separator ","
.import movie-overview.txt movie_overview


-- [insert your SQL statement(s) ABOVE this line]

-- ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** --

-- (i.1) Count movies with "fight"

-- [insert your SQL statement(s) BELOW this line]

select count(*) as count_overview from movie_overview where overview match 'fight';


-- [insert your SQL statement(s) ABOVE this line]

-- [the following statement(s) are for autograding. DO NOT REMOVE.]
.print '~~~~~'

-- ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** --

-- (i.2) List movies with "love" and "story" nearby

-- [insert your SQL statement(s) BELOW this line]


select id from movie_overview where overview match 'love NEAR/5 story';

-- [insert your SQL statement(s) ABOVE this line]

-- [the following statement(s) are for autograding. DO NOT REMOVE.]
.print '~~~~~'

-- ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** --